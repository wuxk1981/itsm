<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zdhy.platform.itsm.dao.PersonMapper">
	<resultMap id="BaseResultMap" type="com.zdhy.platform.itsm.entity.Person">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="address" property="address" jdbcType="VARCHAR" />
		<result column="age" property="age" jdbcType="INTEGER" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Base_Column_List">
		id, name, address, age, create_time
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from person
		where id = #{id,jdbcType=VARCHAR}
	</select>
	<select id="selectAll" resultMap="BaseResultMap" >
		select
		<include refid="Base_Column_List" />
		from person
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from person
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="com.zdhy.platform.itsm.entity.Person">
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			SELECT replace(uuid(),'-','') FROM dual
		</selectKey>
		insert into person (id, name, address,
		age, create_time)
		values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR},
		#{age,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="com.zdhy.platform.itsm.entity.Person">
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			SELECT replace(uuid(),'-','') FROM dual
		</selectKey>
		insert into person
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="address != null">
				address,
			</if>
			<if test="age != null">
				age,
			</if>
			<if test="createTime != null">
				create_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="address != null">
				#{address,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				#{age,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				#{createTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.zdhy.platform.itsm.entity.Person">
		update person
		<set>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="address != null">
				address = #{address,jdbcType=VARCHAR},
			</if>
			<if test="age != null">
				age = #{age,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.zdhy.platform.itsm.entity.Person">
		update person
		set name = #{name,jdbcType=VARCHAR},
		address = #{address,jdbcType=VARCHAR},
		age = #{age,jdbcType=INTEGER},
		create_time = #{createTime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=VARCHAR}
	</update>
	
<!-- 分页 __begin-->
  <sql id="limit_sql">
  	   <if test="page_sql != null and page_sql != ''">
      	${page_sql}
      </if>
  </sql>
  <sql id="where_all">
  	<where>
  	<if test="findContent != null and findContent !='' " >
        and (
        LOWER(name) like CONCAT("%",#{findContent,jdbcType=VARCHAR},"%") or
        LOWER(address) like CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")
        )
      </if>
      </where>
  </sql>
  <!-- 普通的分页查询 -->
  <select id="findAll" resultMap="BaseResultMap" >
  	 select 
    <include refid="Base_Column_List" />
    from person 
    <include refid="where_all"/>
    <include refid="limit_sql" />
  </select>
  <select id="findCount" resultMap="BaseResultMap" >
 	 select count(id) from  person
  	<include refid="where_all" />
  </select>  
<!-- 分页 __end-->
  
  <select id="findPersonByMap" resultMap="BaseResultMap" >
	select * from person
	<where>
		<if test="name != null and name != ''">
			AND name like CONCAT('%', #{name}, '%')
		</if>
		<if test="address != null and address != ''">
			AND address like CONCAT('%', #{address}, '%')
		</if>
		<if test="beginInDate != null and beginInDate != ''">
			AND create_time <![CDATA[ >= #{beginInDate} ]]>
		</if>
		<if test="endInDate != null and endInDate != ''">
			AND create_time <![CDATA[ <= #{endInDate} ]]>
		</if>
	</where>
  </select>  
  
  
	

	
	
	
</mapper>