<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zdhy.platform.itsm.dao.FieldMapper">
	<resultMap id="BaseResultMap" type="com.zdhy.platform.itsm.entity.Field">
		<id column="id" property="id" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="description" property="description" jdbcType="VARCHAR" />
		<result column="input_type" property="inputType" jdbcType="INTEGER" />
		<result column="data_type" property="dataType" jdbcType="INTEGER" />
		<result column="is_required" property="isRequired" jdbcType="INTEGER" />
		<result column="item_id" property="itemId" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		id, name, description, input_type, data_type, is_required, item_id
	</sql>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.String">
		select
		<include refid="Base_Column_List" />
		from it_field
		where id = #{id,jdbcType=VARCHAR}
	</select>
	<select id="selectAll" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from it_field
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.String">
		delete from it_field
		where id = #{id,jdbcType=VARCHAR}
	</delete>
	<insert id="insert" parameterType="com.zdhy.platform.itsm.entity.Field">
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			SELECT replace(uuid(),'-','') FROM dual
		</selectKey>
		insert into it_field (id, name, description,
		input_type, data_type, is_required,
		item_id)
		values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
		#{description,jdbcType=VARCHAR},
		#{inputType,jdbcType=INTEGER}, #{dataType,jdbcType=INTEGER}, #{isRequired,jdbcType=INTEGER},
		#{itemId,jdbcType=VARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.zdhy.platform.itsm.entity.Field">
		<selectKey keyProperty="id" resultType="String" order="BEFORE">
			SELECT replace(uuid(),'-','') FROM dual
		</selectKey>
		insert into it_field
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="description != null">
				description,
			</if>
			<if test="inputType != null">
				input_type,
			</if>
			<if test="dataType != null">
				data_type,
			</if>
			<if test="isRequired != null">
				is_required,
			</if>
			<if test="itemId != null">
				item_id,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				#{description,jdbcType=VARCHAR},
			</if>
			<if test="inputType != null">
				#{inputType,jdbcType=INTEGER},
			</if>
			<if test="dataType != null">
				#{dataType,jdbcType=INTEGER},
			</if>
			<if test="isRequired != null">
				#{isRequired,jdbcType=INTEGER},
			</if>
			<if test="itemId != null">
				#{itemId,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.zdhy.platform.itsm.entity.Field">
		update it_field
		<set>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				description = #{description,jdbcType=VARCHAR},
			</if>
			<if test="inputType != null">
				input_type = #{inputType,jdbcType=INTEGER},
			</if>
			<if test="dataType != null">
				data_type = #{dataType,jdbcType=INTEGER},
			</if>
			<if test="isRequired != null">
				is_required = #{isRequired,jdbcType=INTEGER},
			</if>
			<if test="itemId != null">
				item_id = #{itemId,jdbcType=VARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=VARCHAR}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.zdhy.platform.itsm.entity.Field">
		update it_field
		set name = #{name,jdbcType=VARCHAR},
		description = #{description,jdbcType=VARCHAR},
		input_type = #{inputType,jdbcType=INTEGER},
		data_type = #{dataType,jdbcType=INTEGER},
		is_required = #{isRequired,jdbcType=INTEGER},
		item_id = #{itemId,jdbcType=VARCHAR}
		where id = #{id,jdbcType=VARCHAR}
	</update>

	<!-- 分页 __begin -->
	<sql id="limit_sql">
		<if test="page_sql != null and page_sql != ''">
			${page_sql}
		</if>
	</sql>
	<sql id="where_all">
		<where>
			<if test="findContent != null and findContent !='' ">
				and (
				LOWER(name) like CONCAT("%",#{findContent,jdbcType=VARCHAR},"%") or
				LOWER(description) like
				CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")
				)
			</if>
		</where>
	</sql>
	<!-- 普通的分页查询 -->
	<select id="findAll" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM it_field
		<include refid="where_all" />
		<include refid="limit_sql" />
	</select>
	<select id="findCount" resultMap="BaseResultMap">
		SELECT count(id) FROM it_field
		<include refid="where_all" />
	</select>
	<!-- 分页 __end -->
</mapper>